/* using namespace std;는 std라는 네임스페이스를 생략하고 c++ 표준 라이브러리의 요소들을 사용할 수 있게 해준다.
ex: std::cout아닌 cout으로 사용할 수 있게 된다.

const string& route : routes 는 순회할 벡터값인 routes를 참조해 String형태의 route라는 복사본을 만드는 것

STL 컨테이너, 예를 들어 vector, list, set, map 등에서 사용하는 .size()는 컨테이너에 저장된 요소의 개수를 반환합니다. 
하지만 .length() 함수는 지원되지 않는다 이 경우에는 vector이다.

'0'을 빼는 것은 문자 '0'에서 '9'까지의 문자를 각각 0에서 9까지의 정수로 변환하기 위한 일반적인 방법입니다.



*/
#include <iostream>    // 표준 입출력 (cout)
#include <vector>      // 벡터 자료구조 (vector)
#include <string>      // 문자열 처리 (string)
#include <map>         // 맵 자료구조 (map)
#include <utility>     // pair 자료구조 (pair)
using namespace std;

// 방향 이동을 위한 dx, dy 배열 (동, 서, 남, 북)
int dx[4] = {0, 0, 1, -1};  // x축 이동 (E, W, S, N 순서)
int dy[4] = {1, -1, 0, 0};  // y축 이동 (E, W, S, N 순서)

// 방향을 문자에서 인덱스로 매핑
map<char, int> directionMap = {
    {'E', 0}, {'W', 1}, {'S', 2}, {'N', 3}
};

vector<int> solution(vector<string> park, vector<string> routes) {
    int cx, cy;  // 현재 위치 (cx: 행, cy: 열)

    // 시작 위치 'S'를 찾아 cx, cy에 저장
    for (int i = 0; i < park.size(); i++) 
    {
        for (int j = 0; j < park[i].size(); j++) 
        {
            if (park[i][j] == 'S') {  // 시작점 찾기
                cx = i;
                cy = j;
                break;
            }
        }
    }

    // routes를 순회하며 각 명령에 따라 이동
    for (const string& route : routes) 
    {
        char dirChar = route[0];   // 방향 (E, W, S, N)
        int num = route[2] - '0';  // 이동할 칸 수

        int dir = directionMap[dirChar];  // 방향을 인덱스로 변환
        int nx = cx, ny = cy;  // 새로운 좌표 (초기화는 현재 위치로)

        // num 만큼 이동 시도
        for (int step = 0; step < num; ++step) 
        {
            nx += dx[dir];  // x축 이동
            ny += dy[dir];  // y축 이동

            // 경계를 벗어나면 이동 중지
            if (nx < 0 || nx >= park.size() || ny < 0 || ny >= park[0].size()) {
                break;
            }

            // 장애물 'X'에 도달하면 이동 중지
            if (park[nx][ny] == 'X') {
                break;
            }
        }

        // 이동이 모두 유효했을 때에만 현재 위치 갱신
        // 즉, 이동을 완료한 경우에만 마지막 좌표로 업데이트
        if (nx >= 0 && nx < park.size() && ny >= 0 && ny < park[0].size() && park[nx][ny] != 'X') {
            cx = nx;
            cy = ny;
        }
    }

    // 최종 좌표 반환
    return {cx, cy};
}

